#!/usr/bin/env bash

# the script should output 3 choices to user
echo "1. Vanilla ops" # create objects
echo "2. Scratch ops" # build image
echo "3. Expose stuff"
echo "4. Exit"
echo "Please select an option (1-4):"
read -r choice

update_or_create_deployment() {
            printf "\e[32mIs the workload currently running in cluster? (y/n)\e[0m\t"
            read -r is_running
            if [[ $is_running == "y" ]]; then
            # list the deployments for the user
            kubectl get deployments -o custom-columns="Deployments:.metadata.name" --no-headers
            printf "\e[32mSelect a deployment from above to update\e[0m:\t"
            read -r deployment_name
            # check if the deployment exists aka typo in deployment name
            if kubectl get deployment "$deployment_name" > /dev/null 2>&1; then
                echo "ðŸ”Ž Current image used by $deployment_name " | lolcat
                kubectl get deployment "$deployment_name" -o jsonpath='{.spec.template.spec.containers[0].image}' | lolcat
                echo -e "\n--------------------------------" | lolcat
                kubectl rollout history deployment/"$deployment_name" | lolcat
                echo -e "\nðŸš€ Updating the deployment..." | lolcat
                kubectl set image deployment/"$deployment_name" "$deployment_name=$IMAGE_TAG" --record
                # wait for the deployment to be updated 
                kubectl rollout status deployment/"$deployment_name" | lolcat
                echo -e "\n--------------------------------" | lolcat
                echo "ðŸ”Ž Current image used by $deployment_name " | lolcat
                kubectl get deployment "$deployment_name" -o jsonpath='{.spec.template.spec.containers[0].image}' | lolcat
                kubectl rollout history deployment/"$deployment_name" | lolcat
            else
                echo "Deployment $deployment_name does not exist. Exiting..."
                exit 1
            fi
            elif [[ $is_running == "n" ]]; then
            # create kubernetes deployment based on IMAGE_TAG
            printf "\e[32mCreating Kubernetes deployment...$REPO_NAME\e[0m\n"
            kubectl create deployment "$REPO_NAME" --image="$IMAGE_TAG"
            # wait for the deployment to be created
            kubectl rollout status deployment/"$REPO_NAME"
            kubectl rollout history deployment/"$REPO_NAME"
            else
            echo "Invalid option. Please select y or n."
            fi
        }

case $choice in
    1)
        # create tag for the image (foldername)
        printf "\e[32mEnter the repository name:\e[0m "
        read -r REPO_NAME

        REGISTRY_REPO="dejanualex/$REPO_NAME"
        # TAG="0.1.0"
        # read tag from user with default value
        printf "\e[32mEnter the tag for the image (semver: 0.1.0):\e[0m "
        read -r TAG
        TAG=${TAG:-0.1.0}
        IMAGE_TAG="$REGISTRY_REPO:$TAG"

        # Call the function
        update_or_create_deployment

        ;;
    2)
        # create tag for the image (foldername)
        printf "\e[32mEnter the repository name:\e[0m "
        read -r REPO_NAME

        REGISTRY_REPO="dejanualex/$REPO_NAME"
        # TAG="0.1.0"
        # read tag from user with default value
        printf "\e[32mEnter the tag for the image (semver: 0.1.0):\e[0m "
        read -r TAG
        TAG=${TAG:-0.1.0}
        IMAGE_TAG="$REGISTRY_REPO:$TAG"

        afplay ~/Desktop/Git_projects/CaaS/mesplugin/chemin.m4a & disown
        if docker build -t "$IMAGE_TAG" "$REPO_NAME"; then
            echo "Build succeeded. Pushing image..."
            docker push "$IMAGE_TAG"
        else
            echo "Build failed. Skipping push."
        fi

        # Call the function
        update_or_create_deployment

        ;;
    3)
        # expose the deployment
        printf "\e[32mExposingðŸ¤”...\e[0m\n"
        # list the deployments for the user
            kubectl get deployments -o custom-columns="Deployments:.metadata.name" --no-headers
            printf "\e[32mSelect a deployment from above to update\e[0m\n"
            read -r deployment_name
            kubectl expose deploy "$deployment_name" --name="$deployment_name-svc" --type="LoadBalancer" --port=5555 --target-port=8888
            echo "ðŸŽ‰ Deployment $deployment_name exposed!"
            kubectl get svc
        ;;
    4)
        echo "Exiting..."
        exit 0
        ;;
    *)
        echo "Invalid option. Please select a valid option (1-4)."
        ;;
esac
# Example usage:
# kubectl fops


